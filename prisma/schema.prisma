generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Period {
  MORNING
  AFTERNOON
  EVENING
}

enum Role {
  USER
  TEACHER
  ADMIN
}

enum Status {
  ACTIVE
  INACTIVE
}

model Course {
  id          String       @id @default(uuid())
  name        String
  description String
  periods     Period[]

  semesters   Semester[]
  teachers    Teacher[]     @relation("CourseTeachers")
  disciplines Discipline[]  @relation("CourseDisciplines")
semesterDuration Int @default(0)
  classes     Class[]

  status Status @default(ACTIVE)

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  schedulings Scheduling[]
}

model Semester {
  id          String       @id @default(uuid())
  name        String
  description String

  courseId    String
  course      Course       @relation(fields: [courseId], references: [id])

  disciplines Discipline[]
  classes     Class[]
  schedulings Scheduling[]

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Class {
  id          String       @id @default(uuid())
  name        String          
  
  courseId    String
  course      Course       @relation(fields: [courseId], references: [id])

  semesterId  String
  semester    Semester     @relation(fields: [semesterId], references: [id])

  // disciplines Discipline[] 
  schedulings Scheduling[] 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Discipline {
  id          String     @id @default(uuid())
  name        String

  semesterId  String
  semester    Semester   @relation(fields: [semesterId], references: [id])

  // classId     String?
  // class       Class?     @relation(fields: [classId], references: [id])

  teachers    Teacher[]  @relation("DisciplineTeachers")
  courses     Course[]   @relation("CourseDisciplines")

  dayPeriods Period[]

  status Status @default(ACTIVE)

  schedulings Scheduling[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Scheduling {
  id        String   @id @default(uuid())
  name      String
  date      DateTime
  startTime DateTime
  endTime   DateTime

  userId String
  user   User   @relation(fields: [userId], references: [id])

  courseId String
  course   Course @relation(fields: [courseId], references: [id])

  semesterId String
  semester   Semester @relation(fields: [semesterId], references: [id])

  disciplineId String
  discipline   Discipline @relation(fields: [disciplineId], references: [id])

  classId   String?
  class     Class?   @relation(fields: [classId], references: [id])

  // Campo JSON para armazenar detalhes adicionais
  details   Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Teacher {
  id   String @id @default(uuid())
  name String

  courses     Course[]     @relation("CourseTeachers")
  disciplines Discipline[] @relation("DisciplineTeachers")

  status Status @default(ACTIVE)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  roles         Role[]    @default([USER])

  schedulings Scheduling[]

  accounts Account[]
  sessions Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
